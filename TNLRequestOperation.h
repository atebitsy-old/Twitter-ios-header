//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <TwitterNetworkLayer/TNLSafeOperation.h>

@class NSDictionary, NSError, NSMutableArray, NSMutableURLRequest, NSObject, NSString, NSURLRequest, TNLRequestConfiguration, TNLRequestOperationQueue, TNLResponse, TNLResponseMetrics, TNLURLSessionTaskOperation;
@protocol OS_dispatch_queue, OS_dispatch_source, TNLHostSanitizer, TNLRequest, TNLRequestDelegate;

@interface TNLRequestOperation : TNLSafeOperation
{
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSObject<OS_dispatch_queue> *_completionQueue;
    long long _enqueuedPriority;
    NSMutableArray *_callbackTagStack;
    unsigned long long _mach_callbackTagTime;
    NSError *_cachedCancelError;
    id <TNLRequestDelegate> _strongDelegate;
    unsigned long long _backgroundTaskIdentifier;
    double _cloggedCallbackTimeout;
    // Error parsing type: Aq, name: _state
    NSMutableURLRequest *_scratchURLRequest;
    double _scratchURLRequestEncodeLatency;
    long long _scratchURLRequestOriginalBodyLength;
    long long _scratchURLRequestEncodedBodyLength;
    id <TNLHostSanitizer> _hostSanitizer;
    TNLResponseMetrics *_metrics;
    NSObject<OS_dispatch_source> *_operationTimeoutTimerSource;
    NSObject<OS_dispatch_source> *_attemptTimeoutTimerSource;
    NSObject<OS_dispatch_source> *_callbackTimeoutTimerSource;
    unsigned long long _callbackTimeoutTimerStartMachTime;
    unsigned long long _callbackTimeoutTimerPausedMachTime;
    unsigned long long _activeRetryId;
    struct {
        unsigned int didEnqueue:1;
        unsigned int didStart:1;
        unsigned int didPrep:1;
        unsigned int inRetryCheck:1;
        unsigned int silentStart:1;
        unsigned int isCallbackClogDetectionEnabled:1;
        unsigned int isObservingApplicationStates:1;
        unsigned int applicationIsInBackground:1;
        unsigned int invalidSessionRetryCount:4;
    } _backgroundFlags;
    TNLURLSessionTaskOperation *_URLSessionTaskOperation;
    // Error parsing type: AB, name: _didCompleteFinishedCallback
    float _downloadProgress;
    float _uploadProgress;
    long long _operationId;
    TNLRequestOperationQueue *_requestOperationQueue;
    TNLRequestConfiguration *_requestConfiguration;
    id <TNLRequestDelegate> _requestDelegate;
    id <TNLRequest> _originalRequest;
    id <TNLRequest> _hydratedRequest;
    Class _responseClass;
    id _context;
    NSString *_cachedDelegateClassName;
    NSError *_terminalErrorOverride;
    long long _internalPriority;
    TNLResponse *_internalFinalResponse;
    NSDictionary *_additionalDecoders;
    NSURLRequest *_hydratedURLRequest;
}

+ (id)operationWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 delegate:(id)arg4;
+ (id)operationWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (id)operationWithRequest:(id)arg1 configuration:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (id)operationWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (id)operationWithURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
+ (id)operationWithURL:(id)arg1 configuration:(id)arg2 delegate:(id)arg3;
+ (id)operationWithRequest:(id)arg1 configuration:(id)arg2 delegate:(id)arg3;
- (void).cxx_destruct;
@property(copy) NSURLRequest *hydratedURLRequest; // @synthesize hydratedURLRequest=_hydratedURLRequest;
@property(copy) NSDictionary *additionalDecoders; // @synthesize additionalDecoders=_additionalDecoders;
@property(retain) TNLResponse *internalFinalResponse; // @synthesize internalFinalResponse=_internalFinalResponse;
@property long long internalPriority; // @synthesize internalPriority=_internalPriority;
@property(retain) NSError *terminalErrorOverride; // @synthesize terminalErrorOverride=_terminalErrorOverride;
@property(copy) NSString *cachedDelegateClassName; // @synthesize cachedDelegateClassName=_cachedDelegateClassName;
@property(retain, nonatomic) id context; // @synthesize context=_context;
@property(nonatomic) float uploadProgress; // @synthesize uploadProgress=_uploadProgress;
@property(nonatomic) float downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property(readonly) Class responseClass; // @synthesize responseClass=_responseClass;
@property(retain, nonatomic) id <TNLRequest> hydratedRequest; // @synthesize hydratedRequest=_hydratedRequest;
@property(readonly, nonatomic) id <TNLRequest> originalRequest; // @synthesize originalRequest=_originalRequest;
@property(readonly, nonatomic) __weak id <TNLRequestDelegate> requestDelegate; // @synthesize requestDelegate=_requestDelegate;
@property(readonly, nonatomic) TNLRequestConfiguration *requestConfiguration; // @synthesize requestConfiguration=_requestConfiguration;
@property(retain, nonatomic) TNLRequestOperationQueue *requestOperationQueue; // @synthesize requestOperationQueue=_requestOperationQueue;
@property(readonly, nonatomic) long long operationId; // @synthesize operationId=_operationId;
- (void)start;
- (_Bool)isExecuting;
- (_Bool)isCancelled;
- (_Bool)isFinished;
- (_Bool)isAsynchronous;
- (_Bool)isConcurrent;
- (void)cancelWithSource:(id)arg1 underlyingError:(id)arg2;
- (void)cancelWithSource:(id)arg1;
- (void)cancel;
- (void)waitUntilFinishedWithoutBlockingRunLoop;
- (void)network_URLSessionTaskOperation:(id)arg1 didStartSessionTaskWithRequest:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didTransitionToState:(long long)arg2 withResponse:(id)arg3;
- (void)network_URLSessionTaskOperation:(id)arg1 finalizeWithResponseInfo:(id)arg2 responseError:(id)arg3 metaData:(id)arg4 taskMetrics:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)network_URLSessionTaskOperation:(id)arg1 didStartTaskWithTaskIdentifier:(unsigned long long)arg2 configIdentifier:(id)arg3 sharedContainerIdentifier:(id)arg4 isBackgroundRequest:(_Bool)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 appendReceivedData:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didUpdateDownloadProgress:(float)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 didUpdateUploadProgress:(float)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 redirectFromRequest:(id)arg2 withHTTPResponse:(id)arg3 to:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)_network_notifySanitizedHost:(id)arg1 toHost:(id)arg2;
- (void)network_URLSessionTaskOperation:(id)arg1 redirectedFrom:(id)arg2 withHTTPResponse:(id)arg3 to:(id)arg4 metaData:(id)arg5;
- (void)_network_willPerformRedirectFromRequest:(id)arg1 withHTTPResponse:(id)arg2 toRequest:(id)arg3 forTaskOperation:(id)arg4 redirectPolicy:(long long)arg5 completion:(CDUnknownBlockType)arg6;
- (void)network_URLSessionTaskOperation:(id)arg1 willPerformRedirectFromRequest:(id)arg2 withHTTPResponse:(id)arg3 toRequest:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)network_URLSessionTaskOperation:(id)arg1 didReceiveURLResponse:(id)arg2;
- (void)network_URLSessionTaskOperationIsWaitingForConnectivity:(id)arg1;
@property long long priority;
- (long long)qualityOfService;
- (long long)queuePriority;
@property(readonly) long long responseSource;
- (id)currentURLResponse;
- (id)currentURLRequest;
@property(readonly, nonatomic) unsigned long long redirectCount;
@property(readonly, nonatomic) unsigned long long retryCount;
@property(readonly, nonatomic) unsigned long long attemptCount;
@property(readonly) TNLResponse *response;
@property(readonly) NSError *error;
- (void)_tnl_setState:(long long)arg1;
- (void)setState:(long long)arg1 async:(_Bool)arg2;
@property(readonly, nonatomic) long long state;
@property(readonly, nonatomic) long long executionMode;
@property(readonly, nonatomic) id <TNLRequestDelegate> internalDelegate;
@property(retain) TNLURLSessionTaskOperation *URLSessionTaskOperation;
- (void)enqueueToOperationQueue:(id)arg1;
- (void)dealloc;
- (_Bool)dealloc_isObservingApplicationStates;
- (unsigned long long)dealloc_backgroundTaskIdentifier;
- (id)initWithRequest:(id)arg1 responseClass:(Class)arg2 configuration:(id)arg3 delegate:(id)arg4;
- (id)init;
- (void)waitUntilFinished;
- (void)addDependency:(id)arg1;
- (void)_network_endBackgroundTask;
- (void)_network_startBackgroundTask;
- (void)_dealloc_stopObservingApplicationStatesIfNecessary;
- (void)_network_startObservingApplicationStates;
- (void)_network_didBecomeActive;
- (void)_network_willResignActive;
- (void)_private_didBecomeActive:(id)arg1;
- (void)_private_willResignActive:(id)arg1;
- (void)_noop;
- (void)_network_attemptTimeoutTimerDidFire;
- (void)_network_invalidateAttemptTimeoutTimer;
- (void)_network_startAttemptTimeoutTimer:(double)arg1;
- (void)_network_unpauseCallbackTimer;
- (void)_network_pauseCallbackTimer;
- (void)_network_callbackTimerFired;
- (void)_network_startCallbackTimerIfNecessary;
- (void)_network_stopCallbackTimer;
- (void)_network_startCallbackTimerWithAlreadyElapsedDuration:(double)arg1;
- (void)_network_operationTimeoutTimerDidFire;
- (void)_network_invalidateOperationTimeoutTimer;
- (void)_network_startOperationTimeoutTimer:(double)arg1;
- (void)_network_tryRetryWithId:(unsigned long long)arg1 oldResponse:(id)arg2 retryPolicyProvider:(id)arg3;
- (void)_network_invalidateRetry;
- (void)_network_startRetryWithDelay:(double)arg1 oldResponse:(id)arg2 retryPolicyProvider:(id)arg3;
- (void)_retryQueue_doRetryWithPolicy:(id)arg1 oldState:(long long)arg2 attemptResponse:(id)arg3 retryDelay:(double)arg4 eventHandler:(id)arg5 hasCachedCancel:(_Bool)arg6 newConfiguration:(id)arg7 newOperationTimeout:(double)arg8;
- (id)_retryQueue_pullNewRequestConfigurationFromPolicy:(id)arg1 attemptResponse:(id)arg2 oldConfiguration:(id)arg3;
- (double)_retryQueue_pullRetryDelayFromPolicy:(id)arg1 attemptResponse:(id)arg2;
- (void)_network_retryDuringTransitionFromState:(long long)arg1 toState:(long long)arg2 withAttemptResponse:(id)arg3 retryPolicyProvider:(id)arg4;
- (void)_network_attemptRetryDuringTransitionFromState:(long long)arg1 toState:(long long)arg2 withAttemptResponse:(id)arg3;
- (void)_network_forciblyRetryInvalidatedURLSessionRequestWithAttemptResponse:(id)arg1;
- (_Bool)_network_shouldForciblyRetryInvalidatedURLSessionRequestWithAttemptResponse:(id)arg1;
- (_Bool)_network_shouldAttemptRetryDuringTransitionFromState:(long long)arg1 toState:(long long)arg2 withAttemptResponse:(id)arg3;
- (void)_network_applyEncodingMetricsToInfo:(id)arg1 withMetaData:(id)arg2;
- (id)_network_finalizeResponseWithInfo:(id)arg1 responseError:(id)arg2 metadata:(id)arg3 taskMetrics:(id)arg4;
- (id)_createLogContextStringForState:(long long)arg1 withResponse:(id)arg2;
- (void)_finalizeCompletion;
- (void)_network_completeWithResponse:(id)arg1;
- (void)_network_didCompleteAttemptWithResponse:(id)arg1 disposition:(long long)arg2;
- (void)_network_updateMetricsFromState:(long long)arg1 toState:(long long)arg2 withAttemptResponse:(id)arg3;
- (void)_network_completeTransitionFromState:(long long)arg1 toState:(long long)arg2 withAttemptResponse:(id)arg3;
- (void)_network_transitionToState:(long long)arg1 withAttemptResponse:(id)arg2;
- (void)_network_cleanupAfterComplete;
- (void)_network_start:(_Bool)arg1;
- (void)_network_prepareToStart;
- (void)_network_retryWithOldResponse:(id)arg1 retryPolicyProvider:(id)arg2;
- (void)_network_fail:(id)arg1;
- (void)_network_startURLSessionTaskOperation:(id)arg1 isRetry:(_Bool)arg2;
- (void)_network_connect:(_Bool)arg1;
- (void)_network_prepareToConnectThenConnect:(_Bool)arg1;
- (void)_network_prepareRequestStep:(unsigned long long)arg1 isRetry:(_Bool)arg2;
- (_Bool)_network_isPreparing;
- (_Bool)_network_hasFailedOrFinished;
- (_Bool)_network_hasFailed;
- (_Bool)_network_isStateActive;
- (_Bool)_network_isStateCancelled;
- (_Bool)_network_isStateFinished;
- (void)_clearTag:(id)arg1;
- (void)_updateTag:(id)arg1;

@end

